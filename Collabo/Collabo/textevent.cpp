// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textevent.pb

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "textevent.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_textevent_2epb() {
  protobuf_AddDesc_textevent_2epb();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "textevent.pb");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, initialcursorlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, newcursorlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, changelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, textadded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userid_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  EventType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_textevent_2epb);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_textevent_2epb() {
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_textevent_2epb() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014textevent.pb\"\231\001\n\005Event\022\035\n\teventType\030\001 "
    "\001(\0162\n.EventType\022\035\n\025initialCursorLocation"
    "\030\002 \001(\005\022\031\n\021newCursorLocation\030\003 \001(\005\022\024\n\014cha"
    "ngeLength\030\004 \001(\005\022\021\n\ttextAdded\030\005 \001(\t\022\016\n\006us"
    "erID\030\006 \001(\003*G\n\tEventType\022\n\n\006INSERT\020\000\022\n\n\006R"
    "EMOVE\020\001\022\016\n\nCURSORMOVE\020\002\022\010\n\004UNDO\020\003\022\010\n\004RED"
    "O\020\004", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "textevent.pb", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_textevent_2epb);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_textevent_2epb {
  StaticDescriptorInitializer_textevent_2epb() {
    protobuf_AddDesc_textevent_2epb();
  }
} static_descriptor_initializer_textevent_2epb_;
const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_descriptor_;
}
bool EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kEventTypeFieldNumber;
const int Event::kInitialCursorLocationFieldNumber;
const int Event::kNewCursorLocationFieldNumber;
const int Event::kChangeLengthFieldNumber;
const int Event::kTextAddedFieldNumber;
const int Event::kUserIDFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = 0;
  initialcursorlocation_ = 0;
  newcursorlocation_ = 0;
  changelength_ = 0;
  textadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (textadded_ != &::google::protobuf::internal::kEmptyString) {
    delete textadded_;
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_textevent_2epb();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtype_ = 0;
    initialcursorlocation_ = 0;
    newcursorlocation_ = 0;
    changelength_ = 0;
    if (has_textadded()) {
      if (textadded_ != &::google::protobuf::internal::kEmptyString) {
        textadded_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EventType eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EventType_IsValid(value)) {
            set_eventtype(static_cast< ::EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_initialCursorLocation;
        break;
      }

      // optional int32 initialCursorLocation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialCursorLocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initialcursorlocation_)));
          set_has_initialcursorlocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newCursorLocation;
        break;
      }

      // optional int32 newCursorLocation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newCursorLocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newcursorlocation_)));
          set_has_newcursorlocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_changeLength;
        break;
      }

      // optional int32 changeLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changelength_)));
          set_has_changelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_textAdded;
        break;
      }

      // optional string textAdded = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textAdded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textadded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textadded().data(), this->textadded().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userID;
        break;
      }

      // optional int64 userID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EventType eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eventtype(), output);
  }

  // optional int32 initialCursorLocation = 2;
  if (has_initialcursorlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->initialcursorlocation(), output);
  }

  // optional int32 newCursorLocation = 3;
  if (has_newcursorlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newcursorlocation(), output);
  }

  // optional int32 changeLength = 4;
  if (has_changelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->changelength(), output);
  }

  // optional string textAdded = 5;
  if (has_textadded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textadded().data(), this->textadded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->textadded(), output);
  }

  // optional int64 userID = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EventType eventType = 1;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventtype(), target);
  }

  // optional int32 initialCursorLocation = 2;
  if (has_initialcursorlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->initialcursorlocation(), target);
  }

  // optional int32 newCursorLocation = 3;
  if (has_newcursorlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newcursorlocation(), target);
  }

  // optional int32 changeLength = 4;
  if (has_changelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->changelength(), target);
  }

  // optional string textAdded = 5;
  if (has_textadded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textadded().data(), this->textadded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->textadded(), target);
  }

  // optional int64 userID = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EventType eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional int32 initialCursorLocation = 2;
    if (has_initialcursorlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initialcursorlocation());
    }

    // optional int32 newCursorLocation = 3;
    if (has_newcursorlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcursorlocation());
    }

    // optional int32 changeLength = 4;
    if (has_changelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changelength());
    }

    // optional string textAdded = 5;
    if (has_textadded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textadded());
    }

    // optional int64 userID = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_initialcursorlocation()) {
      set_initialcursorlocation(from.initialcursorlocation());
    }
    if (from.has_newcursorlocation()) {
      set_newcursorlocation(from.newcursorlocation());
    }
    if (from.has_changelength()) {
      set_changelength(from.changelength());
    }
    if (from.has_textadded()) {
      set_textadded(from.textadded());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(initialcursorlocation_, other->initialcursorlocation_);
    std::swap(newcursorlocation_, other->newcursorlocation_);
    std::swap(changelength_, other->changelength_);
    std::swap(textadded_, other->textadded_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
