// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textevent.pb

#ifndef PROTOBUF_textevent_2epb__INCLUDED
#define PROTOBUF_textevent_2epb__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_textevent_2epb();
void protobuf_AssignDesc_textevent_2epb();
void protobuf_ShutdownFile_textevent_2epb();

class Event;

enum EventType {
  INSERT = 0,
  REMOVE = 1,
  CURSORMOVE = 2,
  UNDO = 3,
  REDO = 4
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = INSERT;
const EventType EventType_MAX = REDO;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .EventType eventType = 1;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  inline ::EventType eventtype() const;
  inline void set_eventtype(::EventType value);

  // optional int32 initialCursorLocation = 2;
  inline bool has_initialcursorlocation() const;
  inline void clear_initialcursorlocation();
  static const int kInitialCursorLocationFieldNumber = 2;
  inline ::google::protobuf::int32 initialcursorlocation() const;
  inline void set_initialcursorlocation(::google::protobuf::int32 value);

  // optional int32 newCursorLocation = 3;
  inline bool has_newcursorlocation() const;
  inline void clear_newcursorlocation();
  static const int kNewCursorLocationFieldNumber = 3;
  inline ::google::protobuf::int32 newcursorlocation() const;
  inline void set_newcursorlocation(::google::protobuf::int32 value);

  // optional int32 changeLength = 4;
  inline bool has_changelength() const;
  inline void clear_changelength();
  static const int kChangeLengthFieldNumber = 4;
  inline ::google::protobuf::int32 changelength() const;
  inline void set_changelength(::google::protobuf::int32 value);

  // optional string textAdded = 5;
  inline bool has_textadded() const;
  inline void clear_textadded();
  static const int kTextAddedFieldNumber = 5;
  inline const ::std::string& textadded() const;
  inline void set_textadded(const ::std::string& value);
  inline void set_textadded(const char* value);
  inline void set_textadded(const char* value, size_t size);
  inline ::std::string* mutable_textadded();
  inline ::std::string* release_textadded();
  inline void set_allocated_textadded(::std::string* textadded);

  // optional int64 userID = 6;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 6;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Event)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_initialcursorlocation();
  inline void clear_has_initialcursorlocation();
  inline void set_has_newcursorlocation();
  inline void clear_has_newcursorlocation();
  inline void set_has_changelength();
  inline void clear_has_changelength();
  inline void set_has_textadded();
  inline void clear_has_textadded();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int eventtype_;
  ::google::protobuf::int32 initialcursorlocation_;
  ::google::protobuf::int32 newcursorlocation_;
  ::google::protobuf::int32 changelength_;
  ::std::string* textadded_;
  ::google::protobuf::int64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_textevent_2epb();
  friend void protobuf_AssignDesc_textevent_2epb();
  friend void protobuf_ShutdownFile_textevent_2epb();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event

// optional .EventType eventType = 1;
inline bool Event::has_eventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_eventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::EventType Event::eventtype() const {
  return static_cast< ::EventType >(eventtype_);
}
inline void Event::set_eventtype(::EventType value) {
  assert(::EventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
}

// optional int32 initialCursorLocation = 2;
inline bool Event::has_initialcursorlocation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_initialcursorlocation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_initialcursorlocation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_initialcursorlocation() {
  initialcursorlocation_ = 0;
  clear_has_initialcursorlocation();
}
inline ::google::protobuf::int32 Event::initialcursorlocation() const {
  return initialcursorlocation_;
}
inline void Event::set_initialcursorlocation(::google::protobuf::int32 value) {
  set_has_initialcursorlocation();
  initialcursorlocation_ = value;
}

// optional int32 newCursorLocation = 3;
inline bool Event::has_newcursorlocation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_newcursorlocation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_newcursorlocation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_newcursorlocation() {
  newcursorlocation_ = 0;
  clear_has_newcursorlocation();
}
inline ::google::protobuf::int32 Event::newcursorlocation() const {
  return newcursorlocation_;
}
inline void Event::set_newcursorlocation(::google::protobuf::int32 value) {
  set_has_newcursorlocation();
  newcursorlocation_ = value;
}

// optional int32 changeLength = 4;
inline bool Event::has_changelength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_changelength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_changelength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_changelength() {
  changelength_ = 0;
  clear_has_changelength();
}
inline ::google::protobuf::int32 Event::changelength() const {
  return changelength_;
}
inline void Event::set_changelength(::google::protobuf::int32 value) {
  set_has_changelength();
  changelength_ = value;
}

// optional string textAdded = 5;
inline bool Event::has_textadded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_textadded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_textadded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_textadded() {
  if (textadded_ != &::google::protobuf::internal::kEmptyString) {
    textadded_->clear();
  }
  clear_has_textadded();
}
inline const ::std::string& Event::textadded() const {
  return *textadded_;
}
inline void Event::set_textadded(const ::std::string& value) {
  set_has_textadded();
  if (textadded_ == &::google::protobuf::internal::kEmptyString) {
    textadded_ = new ::std::string;
  }
  textadded_->assign(value);
}
inline void Event::set_textadded(const char* value) {
  set_has_textadded();
  if (textadded_ == &::google::protobuf::internal::kEmptyString) {
    textadded_ = new ::std::string;
  }
  textadded_->assign(value);
}
inline void Event::set_textadded(const char* value, size_t size) {
  set_has_textadded();
  if (textadded_ == &::google::protobuf::internal::kEmptyString) {
    textadded_ = new ::std::string;
  }
  textadded_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_textadded() {
  set_has_textadded();
  if (textadded_ == &::google::protobuf::internal::kEmptyString) {
    textadded_ = new ::std::string;
  }
  return textadded_;
}
inline ::std::string* Event::release_textadded() {
  clear_has_textadded();
  if (textadded_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textadded_;
    textadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_textadded(::std::string* textadded) {
  if (textadded_ != &::google::protobuf::internal::kEmptyString) {
    delete textadded_;
  }
  if (textadded) {
    set_has_textadded();
    textadded_ = textadded;
  } else {
    clear_has_textadded();
    textadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userID = 6;
inline bool Event::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 Event::userid() const {
  return userid_;
}
inline void Event::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventType>() {
  return ::EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_textevent_2epb__INCLUDED
